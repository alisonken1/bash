#!/bin/sh
#
# /etc/rc.d/rc.firewall
#
# Starts/stops iptables rules
# Written for Slackware v14.1
#
# Modify /etc/rc.d/rc.inet1 to call this script during start/stop
#
# IANA IPV4 Private network assignments
# 10.0.0.0/8        (255.0.0.0)     Private Class A network (1 network)
# 100.64.0.0/10     (255.192.0.0)   Carrier internal addresses
# 169.254.0.0/16    (255.255.0.0)   Link-local addresses (Zero Config)
# 172.16.0.0/12     (255.240.0.0)   Private Class B networks (16 networks)
# 192.168.0.0/16    (255.255.0.0)   Private Class C networks (256 networks)
#
# ${IF_LOCAL}      Local interface
# ${IF_INET}       Public interface
#

if [ ${UID} -ne 0 ] ; then
    echo "Script must be run as root"
    exit 1
fi

# Get the configuration information from /etc/rc.d/rc.inet1.conf:
. /etc/rc.d/rc.inet1.conf

# Local variables used
# IPv4 programs
IPTABLES="/usr/sbin/iptables"
IPTSAVE="/usr/sbin/iptables-save"
IPTRESTORE="/usr/sbin/iptables-restore"
IPTFILE="/etc/iptables.save"

###########
# LOGGING #
###########

# If possible, log events in /var/log/messages:
if [ -f /var/run/syslogd.pid -a -x /usr/bin/logger ]; then
    # Set to /bin/cat for now while debugging
    # LOGGER=/usr/bin/logger
    LOGGER=/bin/cat
else # output to stdout/stderr:
    LOGGER=/bin/cat
fi

#############
# Functions #
#############

ip_forward_start() {
  if [ -f /proc/sys/net/ipv4/ip_forward ]; then
    echo "Activating IPv4 packet forwarding."
    echo 1 > /proc/sys/net/ipv4/ip_forward
    # Changing /proc/sys/net/ipv4/ip_forward results in resetting all
    # non-default ipv4 parameters for the interface as mentioned in
    # /usr/src/linux/Documentation/networking/ip-sysctl.txt.  So, we
    # will reapply any ipv4 sysctl parameters now:
    if [ -r /etc/sysctl.conf ]; then
      /bin/grep ipv4 /etc/sysctl.conf | sysctl -p - 1> /dev/null 2> /dev/null
    fi
  fi
  # When using IPv4 packet forwarding, you will also get the
  # rp_filter, which automatically rejects incoming packets if the
  # routing table entry for their source address doesn't match the
  # network interface they're arriving on.  This has security
  # advantages because it prevents the so-called IP spoofing,
  # however it can pose problems if you use asymmetric routing
  # (packets from you to a host take a different path than packets
  # from that host to you) or if you operate a non-routing host
  # which has several IP addresses on different interfaces.  To
  # turn rp_filter off, uncomment the lines below:
  #if [ -r /proc/sys/net/ipv4/conf/all/rp_filter ]; then
  #  echo "Disabling rp_filter."
  #  echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter
  #fi
}

ip_forward_stop() {
  if [ -f /proc/sys/net/ipv4/ip_forward ]; then
    echo "Disabling IPv4 packet forwarding."
    echo 0 > /proc/sys/net/ipv4/ip_forward
    # Changing /proc/sys/net/ipv4/ip_forward results in resetting all
    # non-default ipv4 parameters for the interface as mentioned in
    # /usr/src/linux/Documentation/networking/ip-sysctl.txt.  So, we
    # will reapply any ipv4 sysctl parameters now:
    if [ -r /etc/sysctl.conf ]; then
      /bin/grep ipv4 /etc/sysctl.conf | sysctl -p - 1> /dev/null 2> /dev/null
    fi
  fi
}

fw_build() {
    echo "/etc/rc.d/rc.firewall:  Building IPv4 rules" | $LOGGER
    # Save the rules
    ${IPTSAVE} >${IPTFILE}
}

fw_start() {
    echo "/etc/rc.d/rc.firewall:  Starting firewall" | $LOGGER
    # Last step enable packet forwarding between IF_LOCAL and IF_INET
    if [ -e ${IPTFILE} ] ; then
        echo "/etc/rc.d/rc.firewall:  Reloading IPv4 rules" | $LOGGER
        ${IPTRESTORE} <${IPTFILE}
    else
        fw_build
    fi
    ip_forward_start
}

fw_stop() {
    echo "/etc/rc.d/rc.firewall:  Stopping firewall" | $LOGGER
    # Stop packet forwarding
    ip_forward_stop
}

fw_restart() {
    echo "/etc/rc.d/rc.firewall:  Re-starting firewall" | $LOGGER
    fw_stop
    sleep 1
    fw_start
}

fw_show() {
    echo "/etc/rc.d/rc.firewall:  Showing rules" | $LOGGER
    f="disabled"
    if [ -f /proc/sys/net/ipv4/ip_forward ] ; then
        if [ $(cat /proc/sys/net/ipv4/ip_forward) -eq 1 ]; then
            f="enabled"
        fi
    fi
    echo "IPV4 packet forwarding"
    f="disabled"
    ${IPTABLES} -L
}

fw_rules() {
    if [ -f ${IPTFILE} ] ; then
        echo "IPv4 rules:"
        cat ${IPTFILE}
        echo
    fi
}

case ${1} in
    start)
        fw_start
        ;;
    stop)
        fw_stop
        ;;
    restart)
        fw_stop
        sleep 1
        fw_start
        ;;
    rebuild)
        fw_stop
        sleep 1
        fw_build4
        fw_build6
        ;;
    status)
        fw_show
        ;;
    rules)
        if [ -e ${IPTFILE} ] ; then
            echo 'Saved IPv4 rules:'
            cat ${IPTFILE}
        else
            echo "No saved rules"
        fi
        ;;
    *)
        echo
        echo "rc.firewall command"
        echo
        echo "  command:"
        echo
        echo "      start:      Install firewall rules"
        echo "      stop:       Flush rules and open firewall"
        echo "      restart:    Restart firewall rules"
        echo "      rebuild:    Flush rules and rebuild tables"
        echo "      status:     Show firewall rules currently in effect"
        echo "      rules:      Show saved rules"
        echo
        ;;
esac
